image: parity/kubetools:helm3
variables:
  KUBE_NAMESPACE:                  "polkassembly"
  CI_REGISTRY:                     "paritytech"
  DOCKER_TAG:                      '$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA'
  GIT_STRATEGY:                    fetch
  GIT_DEPTH:                       100
  # Variables required by Gitlab scanning
  SAST_DISABLE_DIND:               "true"
  SCAN_KUBERNETES_MANIFESTS:       "true"
  ANALYZER_TARGET_DIR:             "auth-server/"
  DS_DISABLE_DIND:                 "true"

# Enable Gitlab's security scanning
include:
  - template: SAST.gitlab-ci.yml
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: License-Scanning.gitlab-ci.yml

kubesec-sast:
  variables:
    ANALYZER_TARGET_DIR: "kubernetes/"

stages:
  - test
  - dockerize
  - deploy
  - publish

cache:
  key:                             '${CI_JOB_NAME}'
  paths:
    - node_modules/
    - packages/*/node_modules/

#### stage:                        test

lint-front-end:
  stage: test
  image: node:12
  interruptible:                   true
  dependencies:                    []
  script:
    - curl -o- -L https://yarnpkg.com/install.sh | bash
    - export PATH=$HOME/.yarn/bin:$PATH
    - cd front-end
    - yarn install
    - yarn lint
    - yarn build
  rules:
    - changes:
      - "front-end/**/*"
  tags:
    - linux-docker

lint-back-end:
  stage: test
  image: node:12
  interruptible:                   true
  dependencies:                    []
  script:
    - curl -o- -L https://yarnpkg.com/install.sh | bash
    - export PATH=$HOME/.yarn/bin:$PATH
    - cd auth-server
    - yarn install
    - yarn lint
    - yarn tsc
  rules:
    - changes:
      - "auth-server/**/*"
  tags:
    - linux-docker

lint-chain-db-watcher:
  stage: test
  image: node:12
  interruptible:                   true
  dependencies:                    []
  script:
    - curl -o- -L https://yarnpkg.com/install.sh | bash
    - export PATH=$HOME/.yarn/bin:$PATH
    - cd chain-db-watcher
    - yarn install
    - yarn lint
    - yarn tsc
  rules:
    - changes:
      - "chain-db-watcher/**/*"
  tags:
    - linux-docker

#### stage:                        dockerize

.build_and_push:                   &build_and_push
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://localhost:2375
  tags:
    - kubernetes-parity-build
  image: docker:18-git
  services:
    - docker:18-dind
  script:
    - POD_NAME=$(echo ${CI_JOB_NAME} | sed -E 's/^[[:alnum:]:]+-//')
    - export DOCKER_IMAGE="${CI_REGISTRY}/${KUBE_NAMESPACE}-${POD_NAME}"
    - export DOCKER_IMAGE_FULL_NAME=$DOCKER_IMAGE:$DOCKER_TAG
    - echo "$BUILD_ARGS"
    - echo "$Docker_Hub_Pass_Parity" | docker login -u "$Docker_Hub_User_Parity" --password-stdin
    - eval "docker build -t" "$DOCKER_IMAGE_FULL_NAME" "$BUILD_ARGS" "$POD_NAME"
    - docker push "$DOCKER_IMAGE_FULL_NAME"

dockerize:staging-front-end:
  stage: dockerize
  environment:
    name: parity-build
  before_script:
    - export BUILD_ARGS="--build-arg REACT_APP_HASURA_GRAPHQL_URL=$(printf \"$STAGING_REACT_APP_HASURA_GRAPHQL_URL\")"
    - export BUILD_ARGS="$BUILD_ARGS --build-arg REACT_APP_JWT_PUBLIC_KEY=$(printf "%s" \'"$STAGING_REACT_APP_JWT_PUBLIC_KEY"\')"
  only:
    - master
  <<: *build_and_push

dockerize:production-front-end:
  stage: dockerize
  environment:
    name: parity-build
  before_script:
    - export BUILD_ARGS="--build-arg REACT_APP_HASURA_GRAPHQL_URL=$(printf \"$PRODUCTION_REACT_APP_HASURA_GRAPHQL_URL\")"
    - export BUILD_ARGS="$BUILD_ARGS --build-arg REACT_APP_JWT_PUBLIC_KEY=$(printf "%s" \'"$PRODUCTION_REACT_APP_JWT_PUBLIC_KEY"\')"
  only:
    - /^v[0-9]+\.[0-9]+\.[0-9]+.*$/
  <<: *build_and_push

dockerize-auth-server:
  stage: dockerize
  environment:
    name: parity-build
  only:
    - master
    - /^v[0-9]+\.[0-9]+\.[0-9]+.*$/
  <<: *build_and_push

dockerize-chain-db-watcher:
  stage: dockerize
  environment:
    name: parity-build
  only:
    - master
    - /^v[0-9]+\.[0-9]+\.[0-9]+.*$/
  <<: *build_and_push

#### stage:                        deploy

.deploy-k8s:                   &deploy-k8s
  script:
    - helm upgrade polkassembly kubernetes/polkassembly
      --install
      --namespace ${KUBE_NAMESPACE}
      --values kubernetes/polkassembly/values-${CI_ENVIRONMENT_NAME}.yaml
      --set dockerTag=${DOCKER_TAG}
      --set cloudsql.instanceCredentials=${CLOUDSQL_INSTANCE_CREDENTIALS}
      --set cloudsql.commandline.args="-instances=${CLOUDSQL_INSTANCE_CONNECTION_NAME}=tcp:5432"
      --set hasura.config.HASURA_GRAPHQL_ADMIN_SECRET=${HASURA_GRAPHQL_ADMIN_SECRET}
      --set hasura.config.HASURA_GRAPHQL_DATABASE_URL=${HASURA_GRAPHQL_DATABASE_URL}
      --set hasura.config.HASURA_POST_SUBSCRIPTION_SECRET=${HASURA_POST_SUBSCRIPTION_SECRET}
      --set hasura.config.HASURA_EVENT_SECRET=${HASURA_EVENT_SECRET}
      --set hasura.config.HASURA_CHAIN_DB_REMOTE_SCHEMA=${HASURA_CHAIN_DB_REMOTE_SCHEMA}
      --set hasura.secret.HASURA_GRAPHQL_JWT_SECRET=${HASURA_GRAPHQL_JWT_SECRET}
      --set authServer.config.DATABASE_URL=${DATABASE_URL}
      --set authServer.config.HASURA_EVENT_SECRET=${HASURA_EVENT_SECRET}
      --set authServer.config.HASURA_POST_SUBSCRIPTION_SECRET=${HASURA_POST_SUBSCRIPTION_SECRET}
      --set authServer.config.JWT_KEY_PASSPHRASE=${JWT_KEY_PASSPHRASE}
      --set authServer.config.REDIS_URL=${REDIS_URL}
      --set authServer.config.SENDGRID_API_KEY=${SENDGRID_API_KEY}
      --set authServer.secret.JWT_PRIVATE_KEY=${AUTH_SERVER_JWT_PRIVATE_KEY}
      --set authServer.secret.JWT_PUBLIC_KEY=${AUTH_SERVER_JWT_PUBLIC_KEY}
      --set chainDbWatcher.config.PROPOSAL_BOT_USERNAME=${PROPOSAL_BOT_USERNAME}
      --set chainDbWatcher.config.PROPOSAL_BOT_PASSWORD=${PROPOSAL_BOT_PASSWORD}

    # test, update/deploy redis server using helm
    - export REDIS_PASSWORD=$(echo "$REDIS_URL" | sed -r 's#redis://:([^@]+).*$#\1#g')
    - helm repo add bitnami https://charts.bitnami.com/bitnami
    - helm repo update

    # test install/upgrade
    - helm upgrade redis bitnami/redis
      --dry-run
      --install
      --namespace ${KUBE_NAMESPACE}
      --values kubernetes/redis/values/${CI_ENVIRONMENT_NAME}.yaml
      --set password=${REDIS_PASSWORD}

    # install/upgrade redis server
    - helm upgrade redis bitnami/redis
      --install
      --namespace ${KUBE_NAMESPACE}
      --values kubernetes/redis/values/${CI_ENVIRONMENT_NAME}.yaml
      --set password=${REDIS_PASSWORD}

deploy-staging:
  stage: deploy
  environment:
    name: dashboards-cluster-1
  tags:
    - kubernetes-parity-build
  only:
    - master
  <<: *deploy-k8s

deploy-production:
  stage: deploy
  environment:
    name: parity-prod
  tags:
    - kubernetes-parity-build
  only:
    - /^v[0-9]+\.[0-9]+\.[0-9]+.*$/
  <<: *deploy-k8s

publish-draft-release:
  stage: publish
  environment:
    name: parity-prod
  image: parity/tools:latest
  only:
    - /^v[0-9]+\.[0-9]+\.[0-9]+.*$/
  script:
    - ./.maintain/publish_draft_release.sh
  interruptible:                   true
  allow_failure:                   true